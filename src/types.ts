type ElementType<K extends keyof HTMLElementTagNameMap> = Partial<
    Omit<
        HTMLElementTagNameMap[K],
        keyof ParentNode | BannedKeys | BannedKeysSpecific<K>
    >
>;
type BannedKeys =
    | "accessKey"
    | "accessKeyLabel"
    | "after"
    | "animate"
    | "blur"
    | "focus"
    | "assignedSlot"
    | "innerText"
    | "offsetHeight"
    | "offsetLeft"
    | "offsetTop"
    | "offsetWidth"
    | "outerText"
    | "attachInternals"
    | "click"
    | "hidePopover"
    | "showPopover"
    | "togglePopover"
    | "addEventListener"
    | "removeEventListener"
    | "classList"
    | "attributes"
    | "clientHeight"
    | "clientLeft"
    | "clientTop"
    | "clientWidth"
    | "localName"
    | "namespaceURI"
    | "ownerDocument"
    | "part"
    | "prefix"
    | "scrollHeight"
    | "scrollLeft"
    | "scrollTop"
    | "scrollWith"
    | "shadowRoot"
    | "tagName"
    | "attachShadow"
    | "checkVisibility"
    | "closest"
    | "computedStyleMap"
    | "getAttribute"
    | "getAttributeNS"
    | "getAttributeNames"
    | "getAttributeNode"
    | "getAttributeNodeNS"
    | "getBoundingClientRect"
    | "getClientRects"
    | "getElementsByClassName"
    | "getElementsByTagName"
    | "getElementsByTagNameNS"
    | "hasAttribute"
    | "hasAttributeNS"
    | "offsetParent"
    | "hasAttributes"
    | "hasPointerCapture"
    | "insertAdjacentElement"
    | "insertAdjacentHTML"
    | "insertAdjacentText"
    | "matches"
    | "releasePointerCapture"
    | "removeAttribute"
    | "removeAttributeNS"
    | "removeAttributeNode"
    | "requestFullscreen"
    | "requestPointerLock"
    | "scroll"
    | "scrollBy"
    | "scrollTo"
    | "scrollWidth"
    | "scrollIntoView"
    | "setAttribute"
    | "setAttributeNS"
    | "setAttributeNode"
    | "setAttributeNodeNS"
    | "setPointerCapture"
    | "toggleAttribute"
    | "webkitMatchesSelector"
    | "before"
    | "remove"
    | "replaceWith"
    | "outerHTML"
    | "nextElementSibling"
    | "previousElementSibling"
    | "getAnimations"
    | "attributeStyleMap";

type BannedKeysSpecific<K extends keyof HTMLElementTagNameMap> =
    K extends "HTMLInputElement"
    ?
    | "checkValidity"
    | "reportValidity"
    | "files"
    | "form"
    | "labels"
    | "list"
    | "useMap"
    | "validationMessage"
    | "validity"
    | "webkitEntries"
    | "webkitdirectory"
    | "willValidate"
    | "select"
    | "setCustomValidity"
    | "setRangeText"
    | "setSelectionRange"
    | "showPicker"
    | "stepDown"
    | "stepUp"
    : K extends "HTMLAnchorElement"
    ?
    | "relList"
    | "rev"
    | "text"
    | "charset"
    | "coords"
    | "name"
    | "shape"
    : K extends "HTMLAreaElement"
    ?
    | "noHref"
    | "relList"
    : K extends "HTMLBRElement"
    ? "clear"
    : K extends "HTMLBodyElement"
    ?
    | "aLink"
    | "background"
    | "bgColor"
    | "link"
    | "text"
    | "vLink"
    : K extends "HTMLButtonElement"
    ?
    | ""
    : never;

declare namespace JSX {
    type IntrinsicElements = {
        [K in keyof HTMLElementTagNameMap]: ElementType<K>;
    };
}

declare var h: any;
